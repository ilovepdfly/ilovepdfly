import{r as l}from"./main--FR5vwUm.js";const D="ilovepdflyDB",S=1,s="lastTasks";let p=null;const w=()=>(p||(p=new Promise((b,m)=>{const d=indexedDB.open(D,S);d.onerror=()=>m(d.error),d.onsuccess=()=>b(d.result),d.onupgradeneeded=u=>{const r=u.target.result;r.objectStoreNames.contains(s)||r.createObjectStore(s,{keyPath:"id"})}})),p),g=()=>{const[b,m]=l.useState([]),[d,u]=l.useState(!0),r=l.useCallback(async()=>{u(!0);try{const c=(await w()).transaction(s,"readonly").objectStore(s),i=await new Promise((n,t)=>{const e=c.getAll();e.onsuccess=()=>n(e.result),e.onerror=()=>t(e.error)});m(i.sort((n,t)=>t.timestamp-n.timestamp))}catch(a){console.error("Failed to load tasks from IndexedDB",a)}finally{u(!1)}},[]),y=l.useCallback(async()=>{try{const o=(await w()).transaction(s,"readwrite"),c=o.objectStore(s),i=Date.now()-7200*1e3,n=c.openCursor();n.onsuccess=t=>{const e=t.target.result;e&&(e.value.timestamp<i&&c.delete(e.primaryKey),e.continue())},await new Promise((t,e)=>{o.oncomplete=()=>t(),o.onerror=()=>e(o.error)})}catch(a){console.error("Failed to cleanup old tasks",a)}},[]);l.useEffect(()=>{y().then(r)},[r,y]);const x=l.useCallback(async a=>{const o={...a,id:Date.now(),timestamp:Date.now()};try{const n=(await w()).transaction(s,"readwrite").objectStore(s);await new Promise((t,e)=>{const k=n.add(o);k.onsuccess=()=>t(),k.onerror=()=>e(k.error)}),await r()}catch(c){console.error("Failed to add task to IndexedDB",c)}},[r]),f=l.useCallback(async a=>{try{const i=(await w()).transaction(s,"readwrite").objectStore(s);await new Promise((n,t)=>{const e=i.delete(a);e.onsuccess=()=>n(),e.onerror=()=>t(e.error)}),await r()}catch(o){console.error("Failed to delete task from IndexedDB",o)}},[r]);return{tasks:b,loading:d,addTask:x,deleteTask:f}};export{g as u};
