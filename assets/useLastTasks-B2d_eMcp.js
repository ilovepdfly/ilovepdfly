import{r as i}from"./main-VsbfKA8d.js";const x="ilovepdflyDB",T=2,r="lastTasks",S="signedDocuments";let p=null;const b=()=>(p||(p=new Promise((m,w)=>{const d=indexedDB.open(x,T);d.onerror=()=>w(d.error),d.onsuccess=()=>m(d.result),d.onupgradeneeded=u=>{const t=u.target.result;t.objectStoreNames.contains(r)||t.createObjectStore(r,{keyPath:"id"}),t.objectStoreNames.contains(S)||t.createObjectStore(S,{keyPath:"id"})}})),p),E=()=>{const[m,w]=i.useState([]),[d,u]=i.useState(!0),t=i.useCallback(async()=>{u(!0);try{const c=(await b()).transaction(r,"readonly").objectStore(r),l=await new Promise((n,o)=>{const e=c.getAll();e.onsuccess=()=>n(e.result),e.onerror=()=>o(e.error)});w(l.sort((n,o)=>o.timestamp-n.timestamp))}catch(a){console.error("Failed to load tasks from IndexedDB",a)}finally{u(!1)}},[]),y=i.useCallback(async()=>{try{const s=(await b()).transaction(r,"readwrite"),c=s.objectStore(r),l=Date.now()-7200*1e3,n=c.openCursor();n.onsuccess=o=>{const e=o.target.result;e&&(e.value.timestamp<l&&c.delete(e.primaryKey),e.continue())},await new Promise((o,e)=>{s.oncomplete=()=>o(),s.onerror=()=>e(s.error)})}catch(a){console.error("Failed to cleanup old tasks",a)}},[]);i.useEffect(()=>{y().then(t)},[t,y]);const D=i.useCallback(async a=>{const s={...a,id:Date.now(),timestamp:Date.now()};try{const n=(await b()).transaction(r,"readwrite").objectStore(r);await new Promise((o,e)=>{const k=n.add(s);k.onsuccess=()=>o(),k.onerror=()=>e(k.error)}),await t()}catch(c){console.error("Failed to add task to IndexedDB",c)}},[t]),f=i.useCallback(async a=>{try{const l=(await b()).transaction(r,"readwrite").objectStore(r);await new Promise((n,o)=>{const e=l.delete(a);e.onsuccess=()=>n(),e.onerror=()=>o(e.error)}),await t()}catch(s){console.error("Failed to delete task from IndexedDB",s)}},[t]);return{tasks:m,loading:d,addTask:D,deleteTask:f}};export{E as u};
