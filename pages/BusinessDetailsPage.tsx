import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext.tsx';
import { StarIcon } from '../components/icons.tsx';
import type { BusinessDetails } from '../contexts/AuthContext.tsx';

// List of countries for the dropdown
const countries = [
    { code: 'AF', name: 'Afghanistan', flag: 'ğŸ‡¦ğŸ‡«' }, { code: 'AL', name: 'Albania', flag: 'ğŸ‡¦ğŸ‡±' },
    { code: 'DZ', name: 'Algeria', flag: 'ğŸ‡©ğŸ‡¿' }, { code: 'AD', name: 'Andorra', flag: 'ğŸ‡¦ğŸ‡©' },
    { code: 'AO', name: 'Angola', flag: 'ğŸ‡¦ğŸ‡´' }, { code: 'AG', name: 'Antigua & Barbuda', flag: 'ğŸ‡¦ğŸ‡¬' },
    { code: 'AR', name: 'Argentina', flag: 'ğŸ‡¦ğŸ‡·' }, { code: 'AM', name: 'Armenia', flag: 'ğŸ‡¦ğŸ‡²' },
    { code: 'AU', name: 'Australia', flag: 'ğŸ‡¦ğŸ‡º' }, { code: 'AT', name: 'Austria', flag: 'ğŸ‡¦ğŸ‡¹' },
    { code: 'AZ', name: 'Azerbaijan', flag: 'ğŸ‡¦ğŸ‡¿' }, { code: 'BS', name: 'Bahamas', flag: 'ğŸ‡§ğŸ‡¸' },
    { code: 'BH', name: 'Bahrain', flag: 'ğŸ‡§ğŸ‡­' }, { code: 'BD', name: 'Bangladesh', flag: 'ğŸ‡§ğŸ‡©' },
    { code: 'BB', name: 'Barbados', flag: 'ğŸ‡§ğŸ‡§' }, { code: 'BY', name: 'Belarus', flag: 'ğŸ‡§ğŸ‡¾' },
    { code: 'BE', name: 'Belgium', flag: 'ğŸ‡§ğŸ‡ª' }, { code: 'BZ', name: 'Belize', flag: 'ğŸ‡§ğŸ‡¿' },
    { code: 'BJ', name: 'Benin', flag: 'ğŸ‡§ğŸ‡¯' }, { code: 'BT', name: 'Bhutan', flag: 'ğŸ‡§ğŸ‡¹' },
    { code: 'BO', name: 'Bolivia', flag: 'ğŸ‡§ğŸ‡´' }, { code: 'BA', name: 'Bosnia & Herzegovina', flag: 'ğŸ‡§ğŸ‡¦' },
    { code: 'BW', name: 'Botswana', flag: 'ğŸ‡§ğŸ‡¼' }, { code: 'BR', name: 'Brazil', flag: 'ğŸ‡§ğŸ‡·' },
    { code: 'BN', name: 'Brunei', flag: 'ğŸ‡§ğŸ‡³' }, { code: 'BG', name: 'Bulgaria', flag: 'ğŸ‡§ğŸ‡¬' },
    { code: 'BF', name: 'Burkina Faso', flag: 'ğŸ‡§ğŸ‡«' }, { code: 'BI', name: 'Burundi', flag: 'ğŸ‡§ğŸ‡®' },
    { code: 'CV', name: 'Cape Verde', flag: 'ğŸ‡¨ğŸ‡»' }, { code: 'KH', name: 'Cambodia', flag: 'ğŸ‡°ğŸ‡­' },
    { code: 'CM', name: 'Cameroon', flag: 'ğŸ‡¨ğŸ‡²' }, { code: 'CA', name: 'Canada', flag: 'ğŸ‡¨ğŸ‡¦' },
    { code: 'CF', name: 'Central African Republic', flag: 'ğŸ‡¨ğŸ‡«' }, { code: 'TD', name: 'Chad', flag: 'ğŸ‡¹ğŸ‡©' },
    { code: 'CL', name: 'Chile', flag: 'ğŸ‡¨ğŸ‡±' }, { code: 'CN', name: 'China', flag: 'ğŸ‡¨ğŸ‡³' },
    { code: 'CO', name: 'Colombia', flag: 'ğŸ‡¨ğŸ‡´' }, { code: 'KM', name: 'Comoros', flag: 'ğŸ‡°ğŸ‡²' },
    { code: 'CG', name: 'Congo', flag: 'ğŸ‡¨ğŸ‡¬' }, { code: 'CR', name: 'Costa Rica', flag: 'ğŸ‡¨ğŸ‡·' },
    { code: 'HR', name: 'Croatia', flag: 'ğŸ‡­ğŸ‡·' }, { code: 'CU', name: 'Cuba', flag: 'ğŸ‡¨ğŸ‡º' },
    { code: 'CY', name: 'Cyprus', flag: 'ğŸ‡¨ğŸ‡¾' }, { code: 'CZ', name: 'Czech Republic', flag: 'ğŸ‡¨ğŸ‡¿' },
    { code: 'DK', name: 'Denmark', flag: 'ğŸ‡©ğŸ‡°' }, { code: 'DJ', name: 'Djibouti', flag: 'ğŸ‡©ğŸ‡¯' },
    { code: 'DM', name: 'Dominica', flag: 'ğŸ‡©ğŸ‡²' }, { code: 'DO', name: 'Dominican Republic', flag: 'ğŸ‡©ğŸ‡´' },
    { code: 'EC', name: 'Ecuador', flag: 'ğŸ‡ªğŸ‡¨' }, { code: 'EG', name: 'Egypt', flag: 'ğŸ‡ªğŸ‡¬' },
    { code: 'SV', name: 'El Salvador', flag: 'ğŸ‡¸ğŸ‡»' }, { code: 'GQ', name: 'Equatorial Guinea', flag: 'ğŸ‡¬ğŸ‡¶' },
    { code: 'ER', name: 'Eritrea', flag: 'ğŸ‡ªğŸ‡·' }, { code: 'EE', name: 'Estonia', flag: 'ğŸ‡ªğŸ‡ª' },
    { code: 'SZ', name: 'Eswatini', flag: 'ğŸ‡¸ğŸ‡¿' }, { code: 'ET', name: 'Ethiopia', flag: 'ğŸ‡ªğŸ‡¹' },
    { code: 'FJ', name: 'Fiji', flag: 'ğŸ‡«ğŸ‡¯' }, { code: 'FI', name: 'Finland', flag: 'ğŸ‡«ğŸ‡®' },
    { code: 'FR', name: 'France', flag: 'ğŸ‡«ğŸ‡·' }, { code: 'GA', name: 'Gabon', flag: 'ğŸ‡¬ğŸ‡¦' },
    { code: 'GM', name: 'Gambia', flag: 'ğŸ‡¬ğŸ‡²' }, { code: 'GE', name: 'Georgia', flag: 'ğŸ‡¬ğŸ‡ª' },
    { code: 'DE', name: 'Germany', flag: 'ğŸ‡©ğŸ‡ª' }, { code: 'GH', name: 'Ghana', flag: 'ğŸ‡¬ğŸ‡­' },
    { code: 'GR', name: 'Greece', flag: 'ğŸ‡¬ğŸ‡·' }, { code: 'GD', name: 'Grenada', flag: 'ğŸ‡¬ğŸ‡©' },
    { code: 'GT', name: 'Guatemala', flag: 'ğŸ‡¬ğŸ‡¹' }, { code: 'GN', name: 'Guinea', flag: 'ğŸ‡¬ğŸ‡³' },
    { code: 'GY', name: 'Guyana', flag: 'ğŸ‡¬ğŸ‡¾' }, { code: 'HT', name: 'Haiti', flag: 'ğŸ‡­ğŸ‡¹' },
    { code: 'HN', name: 'Honduras', flag: 'ğŸ‡­ğŸ‡³' }, { code: 'HU', name: 'Hungary', flag: 'ğŸ‡­ğŸ‡º' },
    { code: 'IS', name: 'Iceland', flag: 'ğŸ‡®ğŸ‡¸' }, { code: 'IN', name: 'India', flag: 'ğŸ‡®ğŸ‡³' },
    { code: 'ID', name: 'Indonesia', flag: 'ğŸ‡®ğŸ‡©' }, { code: 'IR', name: 'Iran', flag: 'ğŸ‡®ğŸ‡·' },
    { code: 'IQ', name: 'Iraq', flag: 'ğŸ‡®ğŸ‡¶' }, { code: 'IE', name: 'Ireland', flag: 'ğŸ‡®ğŸ‡ª' },
    { code: 'IL', name: 'Israel', flag: 'ğŸ‡®ğŸ‡±' }, { code: 'IT', name: 'Italy', flag: 'ğŸ‡®ğŸ‡¹' },
    { code: 'JM', name: 'Jamaica', flag: 'ğŸ‡¯ğŸ‡²' }, { code: 'JP', name: 'Japan', flag: 'ğŸ‡¯ğŸ‡µ' },
    { code: 'JO', name: 'Jordan', flag: 'ğŸ‡¯ğŸ‡´' }, { code: 'KZ', name: 'Kazakhstan', flag: 'ğŸ‡°ğŸ‡¿' },
    { code: 'KE', name: 'Kenya', flag: 'ğŸ‡°ğŸ‡ª' }, { code: 'KW', name: 'Kuwait', flag: 'ğŸ‡°ğŸ‡¼' },
    { code: 'KG', name: 'Kyrgyzstan', flag: 'ğŸ‡°ğŸ‡¬' }, { code: 'LA', name: 'Laos', flag: 'ğŸ‡±ğŸ‡¦' },
    { code: 'LV', name: 'Latvia', flag: 'ğŸ‡±ğŸ‡»' }, { code: 'LB', name: 'Lebanon', flag: 'ğŸ‡±ğŸ‡§' },
    { code: 'LS', name: 'Lesotho', flag: 'ğŸ‡±ğŸ‡¸' }, { code: 'LR', name: 'Liberia', flag: 'ğŸ‡±ğŸ‡·' },
    { code: 'LY', name: 'Libya', flag: 'ğŸ‡±ğŸ‡¾' }, { code: 'LI', name: 'Liechtenstein', flag: 'ğŸ‡±ğŸ‡®' },
    { code: 'LT', name: 'Lithuania', flag: 'ğŸ‡±ğŸ‡¹' }, { code: 'LU', name: 'Luxembourg', flag: 'ğŸ‡±ğŸ‡º' },
    { code: 'MG', name: 'Madagascar', flag: 'ğŸ‡²ğŸ‡¬' }, { code: 'MW', name: 'Malawi', flag: 'ğŸ‡²ğŸ‡¼' },
    { code: 'MY', name: 'Malaysia', flag: 'ğŸ‡²ğŸ‡¾' }, { code: 'MV', name: 'Maldives', flag: 'ğŸ‡²ğŸ‡»' },
    { code: 'ML', name: 'Mali', flag: 'ğŸ‡²ğŸ‡±' }, { code: 'MT', name: 'Malta', flag: 'ğŸ‡²ğŸ‡¹' },
    { code: 'MR', name: 'Mauritania', flag: 'ğŸ‡²ğŸ‡·' }, { code: 'MU', name: 'Mauritius', flag: 'ğŸ‡²ğŸ‡º' },
    { code: 'MX', name: 'Mexico', flag: 'ğŸ‡²ğŸ‡½' }, { code: 'MD', name: 'Moldova', flag: 'ğŸ‡²ğŸ‡©' },
    { code: 'MC', name: 'Monaco', flag: 'ğŸ‡²ğŸ‡¨' }, { code: 'MN', name: 'Mongolia', flag: 'ğŸ‡²ğŸ‡³' },
    { code: 'ME', name: 'Montenegro', flag: 'ğŸ‡²ğŸ‡ª' }, { code: 'MA', name: 'Morocco', flag: 'ğŸ‡²ğŸ‡¦' },
    { code: 'MZ', name: 'Mozambique', flag: 'ğŸ‡²ğŸ‡¿' }, { code: 'MM', name: 'Myanmar', flag: 'ğŸ‡²ğŸ‡²' },
    { code: 'NA', name: 'Namibia', flag: 'ğŸ‡³ğŸ‡¦' }, { code: 'NP', name: 'Nepal', flag: 'ğŸ‡³ğŸ‡µ' },
    { code: 'NL', name: 'Netherlands', flag: 'ğŸ‡³ğŸ‡±' }, { code: 'NZ', name: 'New Zealand', flag: 'ğŸ‡³ğŸ‡¿' },
    { code: 'NI', name: 'Nicaragua', flag: 'ğŸ‡³ğŸ‡®' }, { code: 'NE', name: 'Niger', flag: 'ğŸ‡³ğŸ‡ª' },
    { code: 'NG', name: 'Nigeria', flag: 'ğŸ‡³ğŸ‡¬' }, { code: 'MK', name: 'North Macedonia', flag: 'ğŸ‡²ğŸ‡°' },
    { code: 'NO', name: 'Norway', flag: 'ğŸ‡³ğŸ‡´' }, { code: 'OM', name: 'Oman', flag: 'ğŸ‡´ğŸ‡²' },
    { code: 'PK', name: 'Pakistan', flag: 'ğŸ‡µğŸ‡°' }, { code: 'PA', name: 'Panama', flag: 'ğŸ‡µğŸ‡¦' },
    { code: 'PY', name: 'Paraguay', flag: 'ğŸ‡µğŸ‡¾' }, { code: 'PE', name: 'Peru', flag: 'ğŸ‡µğŸ‡ª' },
    { code: 'PH', name: 'Philippines', flag: 'ğŸ‡µğŸ‡­' }, { code: 'PL', name: 'Poland', flag: 'ğŸ‡µğŸ‡±' },
    { code: 'PT', name: 'Portugal', flag: 'ğŸ‡µğŸ‡¹' }, { code: 'QA', name: 'Qatar', flag: 'ğŸ‡¶ğŸ‡¦' },
    { code: 'RO', name: 'Romania', flag: 'ğŸ‡·ğŸ‡´' }, { code: 'RU', name: 'Russia', flag: 'ğŸ‡·ğŸ‡º' },
    { code: 'RW', name: 'Rwanda', flag: 'ğŸ‡·ğŸ‡¼' }, { code: 'SA', name: 'Saudi Arabia', flag: 'ğŸ‡¸ğŸ‡¦' },
    { code: 'SN', name: 'Senegal', flag: 'ğŸ‡¸ğŸ‡³' }, { code: 'RS', name: 'Serbia', flag: 'ğŸ‡·ğŸ‡¸' },
    { code: 'SL', name: 'Sierra Leone', flag: 'ğŸ‡¸ğŸ‡±' }, { code: 'SG', name: 'Singapore', flag: 'ğŸ‡¸ğŸ‡¬' },
    { code: 'SK', name: 'Slovakia', flag: 'ğŸ‡¸ğŸ‡°' }, { code: 'SI', name: 'Slovenia', flag: 'ğŸ‡¸ğŸ‡®' },
    { code: 'SO', name: 'Somalia', flag: 'ğŸ‡¸ğŸ‡´' }, { code: 'ZA', name: 'South Africa', flag: 'ğŸ‡¿ğŸ‡¦' },
    { code: 'KR', name: 'South Korea', flag: 'ğŸ‡°ğŸ‡·' }, { code: 'ES', name: 'Spain', flag: 'ğŸ‡ªğŸ‡¸' },
    { code: 'LK', name: 'Sri Lanka', flag: 'ğŸ‡±ğŸ‡°' }, { code: 'SD', name: 'Sudan', flag: 'ğŸ‡¸ğŸ‡©' },
    { code: 'SE', name: 'Sweden', flag: 'ğŸ‡¸ğŸ‡ª' }, { code: 'CH', name: 'Switzerland', flag: 'ğŸ‡¨ğŸ‡­' },
    { code: 'SY', name: 'Syria', flag: 'ğŸ‡¸ğŸ‡¾' }, { code: 'TW', name: 'Taiwan', flag: 'ğŸ‡¹ğŸ‡¼' },
    { code: 'TZ', name: 'Tanzania', flag: 'ğŸ‡¹ğŸ‡¿' }, { code: 'TH', name: 'Thailand', flag: 'ğŸ‡¹ğŸ‡­' },
    { code: 'TG', name: 'Togo', flag: 'ğŸ‡¹ğŸ‡¬' }, { code: 'TN', name: 'Tunisia', flag: 'ğŸ‡¹ğŸ‡³' },
    { code: 'TR', name: 'Turkey', flag: 'ğŸ‡¹ğŸ‡·' }, { code: 'UG', name: 'Uganda', flag: 'ğŸ‡ºğŸ‡¬' },
    { code: 'UA', name: 'Ukraine', flag: 'ğŸ‡ºğŸ‡¦' }, { code: 'AE', name: 'United Arab Emirates', flag: 'ğŸ‡¦ğŸ‡ª' },
    { code: 'GB', name: 'United Kingdom', flag: 'ğŸ‡¬ğŸ‡§' }, { code: 'US', name: 'United States', flag: 'ğŸ‡ºğŸ‡¸' },
    { code: 'UY', name: 'Uruguay', flag: 'ğŸ‡ºğŸ‡¾' }, { code: 'UZ', name: 'Uzbekistan', flag: 'ğŸ‡ºğŸ‡¿' },
    { code: 'VE', name: 'Venezuela', flag: 'ğŸ‡»ğŸ‡ª' }, { code: 'VN', name: 'Vietnam', flag: 'ğŸ‡»ğŸ‡³' },
    { code: 'YE', name: 'Yemen', flag: 'ğŸ‡¾ğŸ‡ª' }, { code: 'ZM', name: 'Zambia', flag: 'ğŸ‡¿ğŸ‡²' },
    { code: 'ZW', name: 'Zimbabwe', flag: 'ğŸ‡¿ğŸ‡¼' },
];

// Define components outside of the main component to prevent re-creation on render.
const DetailRow: React.FC<{ label: string, value: string | undefined }> = ({ label, value }) => (
    <div className="py-3">
        <span className="text-sm text-gray-500 dark:text-gray-400">{label}</span>
        <p className="font-semibold text-gray-800 dark:text-gray-100 mt-1">{value || '-'}</p>
    </div>
);

const EditRow: React.FC<{ label: string; name: keyof Omit<BusinessDetails, 'country'>; value: string; onChange: (e: React.ChangeEvent<HTMLInputElement>) => void; }> = ({ label, name, value, onChange }) => (
    <div className="py-2">
        <label htmlFor={name} className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">{label}</label>
        <input
            type="text"
            id={name}
            name={name}
            value={value}
            onChange={onChange}
            className="w-full px-3 py-2 bg-gray-50 dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md focus:ring-brand-red focus:border-brand-red"
        />
    </div>
);

const initialDetails: BusinessDetails = {
  companyName: '',
  vatId: '',
  country: '',
  stateProvince: '',
  city: '',
  address: '',
  zipCode: '',
};

const BusinessDetailsPage: React.FC = () => {
    const { user, updateBusinessDetails, loading } = useAuth();
    const [isEditing, setIsEditing] = useState(false);
    const [formState, setFormState] = useState<BusinessDetails>(initialDetails);
    const [isSaving, setIsSaving] = useState(false);
    const [message, setMessage] = useState('');

    useEffect(() => {
        if (user) {
            const userDetails = user.businessDetails;
            setFormState(userDetails || initialDetails);
            // If there are no business details at all, start in editing mode.
            if (!userDetails) {
                setIsEditing(true);
            }
        }
    }, [user]);

    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
        const { name, value } = e.target;
        setFormState(prevState => ({
            ...prevState,
            [name]: value,
        }));
    };

    const handleSave = async (e: React.FormEvent) => {
        e.preventDefault();
        setIsSaving(true);
        setMessage('');
        try {
            await updateBusinessDetails(formState);
            setMessage('Details saved successfully!');
            setIsEditing(false);
            setTimeout(() => setMessage(''), 3000);
        } catch (error) {
            setMessage('Failed to save details.');
        } finally {
            setIsSaving(false);
        }
    };

    const handleCancel = () => {
        // Reset form to original state
        setFormState(user?.businessDetails || initialDetails);
        // Only exit edit mode if there were details to begin with
        if (user?.businessDetails) {
            setIsEditing(false);
        }
    };

    return (
        <div className="w-full">
            <div className="flex justify-between items-center mb-8">
                <h1 className="text-3xl md:text-4xl font-extrabold text-gray-800 dark:text-gray-100">Business details</h1>
                 <Link
                    to="/pricing"
                    className="bg-yellow-400 hover:bg-yellow-500 text-yellow-900 font-bold py-2 px-4 rounded-md flex items-center gap-2 transition-colors text-sm"
                >
                    <StarIcon className="h-5 w-5" />
                    <span>Upgrade to Premium</span>
                </Link>
            </div>

            <div className="bg-white dark:bg-surface-dark p-8 rounded-lg shadow-lg border border-gray-200 dark:border-gray-800">
                <div className="flex justify-between items-center mb-4">
                    <h2 className="text-xl font-bold">Billing details</h2>
                    {!isEditing && user?.businessDetails && (
                        <button onClick={() => setIsEditing(true)} className="text-brand-red font-semibold hover:underline">
                            Change
                        </button>
                    )}
                </div>
                <p className="text-sm text-gray-500 dark:text-gray-400 mb-6">
                    Invoices will be issued with your Billing information
                </p>

                {loading ? (
                    <p>Loading details...</p>
                ) : isEditing ? (
                    <form onSubmit={handleSave} className="space-y-4">
                        <EditRow label="Company name" name="companyName" value={formState.companyName} onChange={handleInputChange} />
                        <EditRow label="VAT ID" name="vatId" value={formState.vatId} onChange={handleInputChange} />
                        <div className="py-2">
                            <label htmlFor="country" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Country</label>
                            <select
                                id="country"
                                name="country"
                                value={formState.country}
                                onChange={handleInputChange}
                                className="w-full px-3 py-2 bg-gray-50 dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md focus:ring-brand-red focus:border-brand-red"
                            >
                                <option value="">Select a country</option>
                                {countries.map(c => (
                                    <option key={c.code} value={c.name}>{c.flag} {c.name}</option>
                                ))}
                            </select>
                        </div>
                        <EditRow label="State/Province" name="stateProvince" value={formState.stateProvince} onChange={handleInputChange} />
                        <EditRow label="City" name="city" value={formState.city} onChange={handleInputChange} />
                        <EditRow label="Address" name="address" value={formState.address} onChange={handleInputChange} />
                        <EditRow label="Zip Code" name="zipCode" value={formState.zipCode} onChange={handleInputChange} />
                        
                        <div className="flex justify-end gap-4 pt-4">
                            {user?.businessDetails && (
                                <button type="button" onClick={handleCancel} className="bg-gray-200 dark:bg-gray-700 font-semibold py-2 px-6 rounded-lg">
                                    Cancel
                                </button>
                            )}
                            <button type="submit" disabled={isSaving} className="bg-brand-red text-white font-semibold py-2 px-6 rounded-lg disabled:bg-red-300">
                                {isSaving ? 'Saving...' : 'Save'}
                            </button>
                        </div>
                    </form>
                ) : (
                    <div className="divide-y divide-gray-200 dark:divide-gray-700">
                        <DetailRow label="Company name:" value={user?.businessDetails?.companyName} />
                        <DetailRow label="VAT ID:" value={user?.businessDetails?.vatId} />
                        <DetailRow label="Country:" value={user?.businessDetails?.country} />
                        <DetailRow label="State/Province:" value={user?.businessDetails?.stateProvince} />
                        <DetailRow label="City:" value={user?.businessDetails?.city} />
                        <DetailRow label="Address:" value={user?.businessDetails?.address} />
                        <DetailRow label="Zip Code:" value={user?.businessDetails?.zipCode} />
                    </div>
                )}
                 {message && <p className={`mt-4 text-sm font-semibold ${message.includes('successfully') ? 'text-green-600' : 'text-red-500'}`}>{message}</p>}
            </div>
        </div>
    );
};

export default BusinessDetailsPage;
